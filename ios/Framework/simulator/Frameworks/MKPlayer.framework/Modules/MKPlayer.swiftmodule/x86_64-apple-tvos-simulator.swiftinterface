// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name MKPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Alamofire
import BitmovinAnalyticsCollector
import BitmovinPlayer
import Combine
import Foundation
import GroupActivities
@_exported import MKPlayer
import Network
import OSLog
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPAdBreak : ObjectiveC.NSObject {
  final public let position: Foundation.TimeInterval
  final public let duration: Swift.Double
  final public let id: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MKPAdBreakEndEvent {
  public var eventType: Swift.String {
    get
  }
  final public let adType: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MKPAdBreakStartedEvent : MKPlayer.MKPAdEvent {
  final public let adsCount: Swift.Int
  final public let adType: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPAdEvent : MKPlayer.MKPEvent {
  final public let position: Foundation.TimeInterval
  final public let duration: Swift.Double
  final public let id: Swift.String
  final public let adClickUrl: Swift.String?
  final public let adClickTrackingUrl: Swift.String?
  public init(position: Foundation.TimeInterval, duration: Swift.Double, id: Swift.String, adClickUrl: Swift.String? = nil, adClickTrackingUrl: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MKPAdFinishedEvent : MKPlayer.MKPAdEvent {
  final public let name: Swift.String
  public var url: [Swift.String]
  @objc deinit
}
@objc public class MKPAdobePrimetimeConfiguration : ObjectiveC.NSObject, Swift.Encodable {
  final public let applicationId: Swift.String
  final public let requesterId: Swift.String
  final public let resourceId: Swift.String
  final public let userId: Swift.String
  final public let upStreamUserId: Swift.String
  final public let slmt: Swift.String
  final public let mvpd: Swift.String
  final public let endpointURL: Swift.String
  public init(applicationId: Swift.String, requesterId: Swift.String, resourceId: Swift.String, userId: Swift.String, upStreamUserId: Swift.String, slmt: Swift.String, mvpd: Swift.String, endpointURL: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class MKPAdobePrimetimeManager : ObjectiveC.NSObject {
  public func startCMSession()
  public func stopCMSession()
  @objc deinit
}
public enum MKPAdQuartile : Swift.Int {
  case firstQuartile
  case midpoint
  case thirdQuartile
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class MKPAdQuartileEvent : MKPlayer.MKPAdEvent {
  final public let quartile: MKPlayer.MKPAdQuartile
  final public let name: Swift.String
  public var url: [Swift.String]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MKPAdStartedEvent : MKPlayer.MKPAdEvent {
  final public let name: Swift.String
  public var url: [Swift.String]
  public var adIndex: Swift.Int?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPAirPlayAvailableEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPAirPlayChangedEvent : MKPlayer.MKPEvent {
  final public let isAirPlayActive: Swift.Bool
  final public let time: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(isAirPlayActive: Swift.Bool = false, time: Foundation.TimeInterval = 0.0)
  @objc deinit
}
public struct MKPAnalyticsConfiguration : Swift.Codable {
  public let key: Swift.String
  public var experimentName: Swift.String?
  public var customerUserId: Swift.String?
  public var videoId: Swift.String?
  public var title: Swift.String?
  public var cdnProvider: Swift.String?
  public var customData1: Swift.String?
  public var customData2: Swift.String?
  public var customData3: Swift.String?
  public var customData4: Swift.String?
  public var customData5: Swift.String?
  public var customData6: Swift.String?
  public var customData7: Swift.String?
  public var customData8: Swift.String?
  public var customData9: Swift.String?
  public var customData10: Swift.String?
  public var customData11: Swift.String?
  public var customData12: Swift.String?
  public var customData13: Swift.String?
  public var customData14: Swift.String?
  public var customData15: Swift.String?
  public var customData16: Swift.String?
  public var customData17: Swift.String?
  public var customData18: Swift.String?
  public var customData19: Swift.String?
  public var customData20: Swift.String?
  public var customData21: Swift.String?
  public var customData22: Swift.String?
  public var customData23: Swift.String?
  public var customData24: Swift.String?
  public var customData25: Swift.String?
  public var customData26: Swift.String?
  public var customData27: Swift.String?
  public var customData28: Swift.String?
  public var customData29: Swift.String?
  public var customData30: Swift.String?
  public init(key: Swift.String, experimentName: Swift.String? = nil, customerUserId: Swift.String? = nil, videoId: Swift.String? = nil, title: Swift.String? = nil, cdnProvider: Swift.String? = nil, customData1: Swift.String? = nil, customData2: Swift.String? = nil, customData3: Swift.String? = nil, customData4: Swift.String? = nil, customData5: Swift.String? = nil, customData6: Swift.String? = nil, customData7: Swift.String? = nil, customData8: Swift.String? = nil, customData9: Swift.String? = nil, customData10: Swift.String? = nil, customData11: Swift.String? = nil, customData12: Swift.String? = nil, customData13: Swift.String? = nil, customData14: Swift.String? = nil, customData15: Swift.String? = nil, customData16: Swift.String? = nil, customData17: Swift.String? = nil, customData18: Swift.String? = nil, customData19: Swift.String? = nil, customData20: Swift.String? = nil, customData21: Swift.String? = nil, customData22: Swift.String? = nil, customData23: Swift.String? = nil, customData24: Swift.String? = nil, customData25: Swift.String? = nil, customData26: Swift.String? = nil, customData27: Swift.String? = nil, customData28: Swift.String? = nil, customData29: Swift.String? = nil, customData30: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class MKPAudioChangedEvent : MKPlayer.MKPEvent {
  final public let audioTrackOld: MKPlayer.MKPAudioTrack?
  final public let audioTrackNew: MKPlayer.MKPAudioTrack?
  override public var eventType: Swift.String {
    get
  }
  public init(audioTrackOld: MKPlayer.MKPAudioTrack?, audioTrackNew: MKPlayer.MKPAudioTrack?)
  @objc deinit
}
@objc public class MKPAudioTrack : MKPlayer.MKPTrack {
  public var language: Swift.String? {
    get
  }
  public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool = false, language: Swift.String?)
  @objc deinit
}
public struct MKPBackendConfiguration : Swift.Equatable {
  public let serverUrl: Swift.String
  public let authToken: Swift.String
  public let ownerUid: Swift.String
  public init(serverUrl: Swift.String, authToken: Swift.String, ownerUid: Swift.String = "azuki")
  public static func == (lhs: MKPlayer.MKPBackendConfiguration, rhs: MKPlayer.MKPBackendConfiguration) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MKPCastAvailableEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastPausedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPCastPayload : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  final public let currentTime: Foundation.TimeInterval
  final public let deviceName: Swift.String
  public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastPlaybackFinishedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastPlayingEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPCastStartedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  final public let deviceName: Swift.String
  public init(deviceName: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastStartEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastStoppedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPCastTimeUpdatedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  final public let currentTime: Foundation.TimeInterval
  final public let duration: Foundation.TimeInterval
  public init(currentTime: Foundation.TimeInterval, duration: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPCastWaitingForDeviceEvent : MKPlayer.MKPCastPayload {
  override public var eventType: Swift.String {
    get
  }
  override public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval)
  @objc deinit
}
public struct MKPCdnOptions : Swift.Codable {
  public var cdnTokens: [Swift.String : Swift.String]
  public var cdnFailoverPercent: Swift.UInt8
  public init()
  public init(cdnTokens: [Swift.String : Swift.String] = [String: String](), cdnFailoverPercent: Swift.UInt8 = 0)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class MKPDaterangeMetadata : MKPlayer.MKPMetadata {
  @objc deinit
}
@objc public class MKPDownloadConfig : ObjectiveC.NSObject {
  public var minimumBitrate: Foundation.NSNumber?
  public init(minimumBitrate: Foundation.NSNumber)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPDurationChangedEvent : MKPlayer.MKPEvent {
  final public let duration: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(duration: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPDvrWindowExceededEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol MKPError : Swift.Error {
  var code: Swift.String { get }
  var message: Swift.String { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPErrorEvent : MKPlayer.MKPEvent, MKPlayer.MKPError {
  public var code: Swift.String
  public var message: Swift.String
  override public var eventType: Swift.String {
    get
  }
  public init(code: Swift.String, message: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPEvent : ObjectiveC.NSObject, Swift.Error {
  public var eventType: Swift.String {
    get
  }
  public var timestamp: Foundation.TimeInterval {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol MKPFullscreenHandler : AnyObject {
  var fullscreen: Swift.Bool { get }
  func onFullscreenRequested()
  func onFullscreenExitRequested()
}
@objc @_hasMissingDesignatedInitializers public class MKPId3Metadata : MKPlayer.MKPMetadata {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MKPImageMediaPlaylist {
  final public let bandwidth: Swift.Int
  final public let averageBandwidth: Swift.Int
  final public let resolution: Swift.String
  final public let codec: Swift.String
  final public let uri: Swift.String
  @objc deinit
}
@objc public class MKPlayer : MKPlayer.MKPPlayerEventDispatcher {
  weak public var fullscreenHandlerDelegate: MKPlayer.MKPFullscreenHandler? {
    get
    set
  }
  weak public var pictureInPictureDelegate: MKPlayer.MKPPictureInPictureDelegate? {
    get
    set
  }
  public init(parentView: UIKit.UIView, configuration: MKPlayer.MKPPlayerConfiguration)
  public func updateAuthToken(authToken: Swift.String)
  @objc deinit
}
extension MKPlayer.MKPlayer : MKPlayer.MKPPlayerAPI {
  public var isDestroyed: Swift.Bool {
    get
  }
  public var isMuted: Swift.Bool {
    get
  }
  public var volume: Swift.Int {
    get
    set
  }
  public var isPaused: Swift.Bool {
    get
  }
  public var isPlaying: Swift.Bool {
    get
  }
  public var isLive: Swift.Bool {
    get
  }
  public var isLiveEvent: Swift.Bool {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public var currentTime: Foundation.TimeInterval {
    get
  }
  public var getSeekableRange: MKPlayer.MKPTimeRange? {
    get
  }
  public var getCurrentLiveProgramTimeRange: MKPlayer.MKPTimeRange? {
    get
  }
  public var config: MKPlayer.MKPPlayerConfiguration {
    get
  }
  public var maxTimeShift: Foundation.TimeInterval {
    get
  }
  public var timeShift: Foundation.TimeInterval {
    get
  }
  public var isSourceLoaded: Swift.Bool {
    get
  }
  public var isReady: Swift.Bool {
    get
  }
  public var getAvailableSubtitleTracks: [MKPlayer.MKPSubtitleTrack] {
    get
  }
  public var getCurrentSubtitleTrack: MKPlayer.MKPSubtitleTrack {
    get
  }
  public var getAvailableAudioTracks: [MKPlayer.MKPAudioTrack] {
    get
  }
  public var getCurrentAudioTrack: MKPlayer.MKPAudioTrack? {
    get
  }
  public var isAd: Swift.Bool {
    get
  }
  public var isAirPlayActive: Swift.Bool {
    get
  }
  public var isAirPlayAvailable: Swift.Bool {
    get
  }
  public var playbackSpeed: Swift.Float {
    get
    set
  }
  public var bufferLevel: Foundation.TimeInterval {
    get
  }
  public var streamType: MKPlayer.MKPMediaSourceType {
    get
  }
  public var maxSelectableBitrate: Swift.UInt {
    get
    set
  }
  public var currentVideoFrameRate: Swift.Float {
    get
  }
  public var availableVideoQualities: [MKPlayer.MKPVideoQuality] {
    get
  }
  public var videoQuality: MKPlayer.MKPVideoQuality? {
    get
  }
  public var scalingMode: MKPlayer.MKPScalingMode {
    get
    set
  }
  public var fullscreen: Swift.Bool {
    get
  }
  @available(iOS 15.0, tvOS 15.0, *)
  public var isSharePlayActive: Swift.Bool {
    get
  }
  @available(iOS 15.0, tvOS 15.0, *)
  public var isSharePlaySuspended: Swift.Bool {
    get
  }
  @available(iOS 15.0, tvOS 15.0, *)
  public var suspensionReasons: [AVFoundation.AVCoordinatedPlaybackSuspension.Reason] {
    get
  }
  public func load(sourceConfiguration: MKPlayer.MKPSourceConfiguration)
  public func unload()
  public func destroy()
  public func play()
  public func pause()
  public func setBufferTargetLevel(value: Foundation.TimeInterval)
  public func seek(time offset: Foundation.TimeInterval)
  public func skipBackward(seconds: Foundation.TimeInterval)
  public func skipForward(seconds: Foundation.TimeInterval)
  public func mute()
  public func unmute()
  public var isPictureInPicture: Swift.Bool {
    get
  }
  public var isPictureInPictureAvailable: Swift.Bool {
    get
  }
  public func removeSubtitle(trackIdentifier subtitleTrackID: Swift.String)
  public func setSubtitle(trackIdentifier subtitleTrackID: Swift.String?)
  public func setAudio(trackIdentifier audioTrackID: Swift.String)
  public func currentTime(_ timeMode: MKPlayer.MKPTimeMode) -> Foundation.TimeInterval
  public func enterFullscreen()
  public func exitFullscreen()
  public func showAirPlayTargetPicker()
  public func enterPictureInPicture()
  public func exitPictureInPicture()
  public func getThumbnail(time: Swift.Double, resolution: Swift.String? = nil) -> MKPlayer.MKPThumbnail?
  public func getThumbnails(resolution: Swift.String? = nil) -> [MKPlayer.MKPThumbnail]
  public func getThumbnailResolutions() -> [MKPlayer.MKPImageMediaPlaylist]
  public func setLocationDetails(locationDetails: Swift.String)
  public func setAdobePrimetimeConfig(adobePrimetimeConfig: MKPlayer.MKPAdobePrimetimeConfiguration)
  public func setInHomeStatus(isInHome: Swift.Bool)
  @available(iOS 15.0, tvOS 15.0, *)
  public func coordinate<T>(with session: GroupActivities.GroupSession<T>) where T : GroupActivities.GroupActivity
  @available(iOS 15.0, tvOS 15.0, *)
  public func beginSuspension(for suspensionReason: AVFoundation.AVCoordinatedPlaybackSuspension.Reason) -> MKPlayer.MKPSharePlaySuspension
  @available(iOS 15.0, tvOS 15.0, *)
  public func endSuspension(_ suspension: MKPlayer.MKPSharePlaySuspension)
  @available(iOS 15.0, tvOS 15.0, *)
  public func endSuspension(_ suspension: MKPlayer.MKPSharePlaySuspension, proposingNewTime newTime: Foundation.TimeInterval)
  public func setHttpHeaders(headers: [Swift.String : Swift.String])
}
extension MKPlayer.MKPlayer {
  @objc override dynamic public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onPlayerError(_ event: BitmovinPlayer.PlayerErrorEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onDurationChanged(_ event: BitmovinPlayer.DurationChangedEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onReady(_ event: BitmovinPlayer.ReadyEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onSourceError(_ event: BitmovinPlayer.SourceErrorEvent, player: BitmovinPlayer.Player)
  @objc override dynamic public func onTimeChanged(_ event: BitmovinPlayer.TimeChangedEvent, player: BitmovinPlayer.Player)
}
extension MKPlayer.MKPlayer : BitmovinPlayer.UserInterfaceListener {
  @objc dynamic public func onPictureInPictureEnter(_ event: BitmovinPlayer.PictureInPictureEnterEvent, view: BitmovinPlayer.PlayerView)
  @objc dynamic public func onPictureInPictureEntered(_ event: BitmovinPlayer.PictureInPictureEnteredEvent, view: BitmovinPlayer.PlayerView)
  @objc dynamic public func onPictureInPictureExit(_ event: BitmovinPlayer.PictureInPictureExitEvent, view: BitmovinPlayer.PlayerView)
  @objc dynamic public func onPictureInPictureExited(_ event: BitmovinPlayer.PictureInPictureExitedEvent, view: BitmovinPlayer.PlayerView)
}
public enum MKPMediaSourceType : Swift.Int {
  case none
  case hls
  case dash
  case progressive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPMetadata : ObjectiveC.NSObject {
  final public let entries: [MKPlayer.MKPMetadaEntry]
  public init(entries: [MKPlayer.MKPMetadaEntry])
  @objc deinit
}
extension AVFoundation.AVMetadataItem : MKPlayer.MKPMetadaEntry {
  public var metadataType: MKPlayer.MKPMetadataType {
    get
  }
}
public protocol MKPMetadaEntry : ObjectiveC.NSObjectProtocol {
  var metadataType: MKPlayer.MKPMetadataType { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPMetadataEvent : MKPlayer.MKPEvent {
  final public let metadata: MKPlayer.MKPMetadata
  final public let metadataType: MKPlayer.MKPMetadataType
  override public var eventType: Swift.String {
    get
  }
  public init(metadata: MKPlayer.MKPMetadata, type: MKPlayer.MKPMetadataType)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPMetadataParsedEvent : MKPlayer.MKPMetadataEvent {
  override public var eventType: Swift.String {
    get
  }
  override public init(metadata: MKPlayer.MKPMetadata, type: MKPlayer.MKPMetadataType)
  @objc deinit
}
public enum MKPMetadataType : Swift.Int {
  case none
  case id3
  case emsg
  case daterange
  case scte35
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MKPMutedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum MKPOfflineState : Swift.Int {
  case downloaded
  case downloading
  case suspended
  case notDownloaded
  case canceling
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPPausedEvent : MKPlayer.MKPEvent {
  final public let time: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(time: Foundation.TimeInterval)
  @objc deinit
}
public protocol MKPPictureInPictureDelegate : AnyObject {
  func onPictureInPictureEnter(event: MKPlayer.MKPPictureInPictureEnterEvent)
  func onPictureInPictureEntered(event: MKPlayer.MKPPictureInPictureEnteredEvent)
  func onPictureInPictureExit(event: MKPlayer.MKPPictureInPictureExitEvent)
  func onPictureInPictureExited(event: MKPlayer.MKPPictureInPictureExitedEvent)
  func onRestoreUserInterfaceForPictureInPicture(withCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
extension MKPlayer.MKPPictureInPictureDelegate {
  public func onPictureInPictureEnter(event: MKPlayer.MKPPictureInPictureEnterEvent)
  public func onPictureInPictureEntered(event: MKPlayer.MKPPictureInPictureEnteredEvent)
  public func onPictureInPictureExit(event: MKPlayer.MKPPictureInPictureExitEvent)
  public func onPictureInPictureExited(event: MKPlayer.MKPPictureInPictureExitedEvent)
  public func onRestoreUserInterfaceForPictureInPicture(withCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class MKPPictureInPictureEnteredEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPPictureInPictureEnterEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPPictureInPictureExitedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPPictureInPictureExitEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPPlaybackFinishedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol MKPPlayerAPI {
  var isDestroyed: Swift.Bool { get }
  var isMuted: Swift.Bool { get }
  var volume: Swift.Int { get set }
  var isPaused: Swift.Bool { get }
  var isPlaying: Swift.Bool { get }
  var isLive: Swift.Bool { get }
  var isLiveEvent: Swift.Bool { get }
  var duration: Foundation.TimeInterval { get }
  var currentTime: Foundation.TimeInterval { get }
  var getSeekableRange: MKPlayer.MKPTimeRange? { get }
  var getCurrentLiveProgramTimeRange: MKPlayer.MKPTimeRange? { get }
  var config: MKPlayer.MKPPlayerConfiguration { get }
  var maxTimeShift: Foundation.TimeInterval { get }
  var timeShift: Foundation.TimeInterval { get }
  var getAvailableSubtitleTracks: [MKPlayer.MKPSubtitleTrack] { get }
  var getCurrentSubtitleTrack: MKPlayer.MKPSubtitleTrack { get }
  var getAvailableAudioTracks: [MKPlayer.MKPAudioTrack] { get }
  var getCurrentAudioTrack: MKPlayer.MKPAudioTrack? { get }
  var isAd: Swift.Bool { get }
  var isAirPlayActive: Swift.Bool { get }
  var isAirPlayAvailable: Swift.Bool { get }
  var playbackSpeed: Swift.Float { get set }
  var bufferLevel: Swift.Double { get }
  var streamType: MKPlayer.MKPMediaSourceType { get }
  var maxSelectableBitrate: Swift.UInt { get set }
  var currentVideoFrameRate: Swift.Float { get }
  var availableVideoQualities: [MKPlayer.MKPVideoQuality] { get }
  var videoQuality: MKPlayer.MKPVideoQuality? { get }
  var scalingMode: MKPlayer.MKPScalingMode { get set }
  var isPictureInPicture: Swift.Bool { get }
  var isPictureInPictureAvailable: Swift.Bool { get }
  var pictureInPictureDelegate: MKPlayer.MKPPictureInPictureDelegate? { get set }
  var isSourceLoaded: Swift.Bool { get }
  var isReady: Swift.Bool { get }
  @available(iOS 15.0, tvOS 15.0, *)
  var isSharePlayActive: Swift.Bool { get }
  @available(iOS 15.0, tvOS 15.0, *)
  var isSharePlaySuspended: Swift.Bool { get }
  @available(iOS 15.0, tvOS 15.0, *)
  var suspensionReasons: [AVFoundation.AVCoordinatedPlaybackSuspension.Reason] { get }
  func load(sourceConfiguration: MKPlayer.MKPSourceConfiguration)
  func unload()
  func destroy()
  func play()
  func pause()
  func setBufferTargetLevel(value: Foundation.TimeInterval)
  func seek(time offset: Foundation.TimeInterval)
  func skipBackward(seconds: Foundation.TimeInterval)
  func skipForward(seconds: Foundation.TimeInterval)
  func mute()
  func unmute()
  func removeSubtitle(trackIdentifier subtitleTrackID: Swift.String)
  func setSubtitle(trackIdentifier subtitleTrackID: Swift.String?)
  func setAudio(trackIdentifier audioTrackID: Swift.String)
  func currentTime(_ timeMode: MKPlayer.MKPTimeMode) -> Foundation.TimeInterval
  func enterPictureInPicture()
  func exitPictureInPicture()
  func getThumbnails(resolution: Swift.String?) -> [MKPlayer.MKPThumbnail]
  func getThumbnail(time: Swift.Double, resolution: Swift.String?) -> MKPlayer.MKPThumbnail?
  func getThumbnailResolutions() -> [MKPlayer.MKPImageMediaPlaylist]
  func setLocationDetails(locationDetails: Swift.String)
  func setInHomeStatus(isInHome: Swift.Bool)
  @available(iOS 15.0, tvOS 15.0, *)
  func coordinate<T>(with session: GroupActivities.GroupSession<T>) where T : GroupActivities.GroupActivity
  @available(iOS 15.0, tvOS 15.0, *)
  func beginSuspension(for suspensionReason: AVFoundation.AVCoordinatedPlaybackSuspension.Reason) -> MKPlayer.MKPSharePlaySuspension
  @available(iOS 15.0, tvOS 15.0, *)
  func endSuspension(_ suspension: MKPlayer.MKPSharePlaySuspension)
  @available(iOS 15.0, tvOS 15.0, *)
  func endSuspension(_ suspension: MKPlayer.MKPSharePlaySuspension, proposingNewTime newTime: Foundation.TimeInterval)
  func setHttpHeaders(headers: [Swift.String : Swift.String])
}
final public class MKPPlayerConfiguration : Swift.Equatable {
  final public var isAutoplayEnabled: Swift.Bool {
    get
    set
  }
  final public var isUiEnabled: Swift.Bool {
    get
    set
  }
  final public var isLoggingEnabled: Swift.Bool
  final public var isMuted: Swift.Bool {
    get
    set
  }
  final public var isTimeShiftEnabled: Swift.Bool {
    get
    set
  }
  final public var isBackgroundPlaybackEnabled: Swift.Bool {
    get
    set
  }
  final public var isPictureInPictureEnabled: Swift.Bool {
    get
    set
  }
  final public var isNativeHlsParsingEnabled: Swift.Bool {
    get
    set
  }
  final public var isCustomHlsLoadingEnabled: Swift.Bool {
    get
    set
  }
  final public var timeChangedInterval: Swift.Double {
    get
    set
  }
  final public var disableSubtitleTracksWhileSeeking: Swift.Bool {
    get
    set
  }
  final public var maxSelectableBitrate: Swift.UInt {
    get
    set
  }
  final public var audioAndVideoForwardBufferDuration: Swift.Double {
    get
    set
  }
  final public var key: Swift.String? {
    get
    set
  }
  final public var backendConfiguration: MKPlayer.MKPBackendConfiguration?
  final public var enableHlsImageMediaPlaylistSupport: Swift.Bool
  public init()
  public static func == (lhs: MKPlayer.MKPPlayerConfiguration, rhs: MKPlayer.MKPPlayerConfiguration) -> Swift.Bool
  @objc deinit
}
extension MKPlayer.MKPPlayerConfiguration : BitmovinPlayer.PreprocessHttpRequestDelegate {
  @objc final public func preprocessHttpRequest(_ type: Swift.String, httpRequest: BitmovinPlayer.HttpRequest, completionHandler: @escaping (BitmovinPlayer.HttpRequest) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class MKPPlayerEventDispatcher : ObjectiveC.NSObject {
  public func addEvent(listener: MKPlayer.MKPPlayerEventListener)
  public func removeEvent(listener: MKPlayer.MKPPlayerEventListener)
  public func removeAllEventListeners()
  @objc override dynamic public init()
  @objc deinit
}
extension MKPlayer.MKPPlayerEventDispatcher : BitmovinPlayer.PlayerListener {
  @objc dynamic public func onSourceError(_ event: BitmovinPlayer.SourceErrorEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlayerError(_ event: BitmovinPlayer.PlayerErrorEvent, player: BitmovinPlayer.Player)
  public func onError(_ event: MKPlayer.MKPErrorEvent)
  @objc dynamic public func onMuted(_ event: BitmovinPlayer.MutedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPaused(_ event: BitmovinPlayer.PausedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlay(_ event: BitmovinPlayer.PlayEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlaybackFinished(_ event: BitmovinPlayer.PlaybackFinishedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlaying(_ event: BitmovinPlayer.PlayingEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onReady(_ event: BitmovinPlayer.ReadyEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSeek(_ event: BitmovinPlayer.SeekEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSeeked(_ event: BitmovinPlayer.SeekedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onUnmuted(_ event: BitmovinPlayer.UnmutedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onTimeChanged(_ event: BitmovinPlayer.TimeChangedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onDurationChanged(_ event: BitmovinPlayer.DurationChangedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onMetadata(_ event: BitmovinPlayer.MetadataEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onMetadataParsed(_ event: BitmovinPlayer.MetadataParsedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onTimeShift(_ event: BitmovinPlayer.TimeShiftEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onTimeShifted(_ event: BitmovinPlayer.TimeShiftedEvent, player: BitmovinPlayer.Player)
  public func onDvrWindowExceeded(_ event: BitmovinPlayer.DvrWindowExceededEvent)
  @objc dynamic public func onStallStarted(_ event: BitmovinPlayer.StallStartedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onStallEnded(_ event: BitmovinPlayer.StallEndedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onVideoSizeChanged(_ event: BitmovinPlayer.VideoSizeChangedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSubtitleChanged(_ event: BitmovinPlayer.SubtitleChangedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onAudioChanged(_ event: BitmovinPlayer.AudioChangedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onVideoDownloadQualityChanged(_ event: BitmovinPlayer.VideoDownloadQualityChangedEvent, player: BitmovinPlayer.Player)
  public func onScalingModeChanged(_ event: MKPlayer.MKPScalingModeChangedEvent, player: BitmovinPlayer.Player)
  public func onThumbnailAvailable(resolutions: [MKPlayer.MKPImageMediaPlaylist])
  @available(iOS 15.0, tvOS 15.0, *)
  @objc dynamic public func onSharePlayStarted(_ event: BitmovinPlayer.SharePlayStartedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15.0, tvOS 15.0, *)
  @objc dynamic public func onSharePlayEnded(_ event: BitmovinPlayer.SharePlayEndedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15.0, tvOS 15.0, *)
  @objc dynamic public func onSharePlaySuspensionStarted(_ event: BitmovinPlayer.SharePlaySuspensionStartedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15.0, tvOS 15.0, *)
  @objc dynamic public func onSharePlaySuspensionEnded(_ event: BitmovinPlayer.SharePlaySuspensionEndedEvent, player: BitmovinPlayer.Player)
}
public protocol MKPPlayerEventListener : AnyObject {
  func onError(event: MKPlayer.MKPErrorEvent)
  func onMuted(event: MKPlayer.MKPMutedEvent)
  func onPaused(event: MKPlayer.MKPPausedEvent)
  func onPlay(event: MKPlayer.MKPPlayEvent)
  func onPlaybackFinished(event: MKPlayer.MKPPlaybackFinishedEvent)
  func onPlaying(event: MKPlayer.MKPPlayingEvent)
  func onReady(event: MKPlayer.MKPReadyEvent)
  func onSeek(event: MKPlayer.MKPSeekEvent)
  func onSeeked(event: MKPlayer.MKPSeekedEvent)
  func onSourceLoaded(event: MKPlayer.MKPSourceLoadedEvent)
  func onSourceUnloaded(event: MKPlayer.MKPSourceUnloadedEvent)
  func onUnmuted(event: MKPlayer.MKPUnmutedEvent)
  func onTimeChanged(event: MKPlayer.MKPTimeChangedEvent)
  func onDurationChanged(event: MKPlayer.MKPDurationChangedEvent)
  func onMetadata(event: MKPlayer.MKPMetadataEvent)
  func onMetadataParsed(event: MKPlayer.MKPMetadataParsedEvent)
  func onAdStarted(event: MKPlayer.MKPAdStartedEvent)
  func onAdFinished(event: MKPlayer.MKPAdFinishedEvent)
  func onAdQuartile(event: MKPlayer.MKPAdQuartileEvent)
  func onTimeShift(event: MKPlayer.MKPTimeShiftEvent)
  func onTimeShifted(event: MKPlayer.MKPTimeShiftedEvent)
  func onDvrWindowExceeded(event: MKPlayer.MKPDvrWindowExceededEvent)
  func onStallStarted(event: MKPlayer.MKPStallStartedEvent)
  func onStallEnded(event: MKPlayer.MKPStallEndedEvent)
  func onVideoSizeChanged(event: MKPlayer.MKPVideoSizeChangedEvent)
  func onSourceWillUnload(event: MKPlayer.MKPSourceWillUnloadEvent)
  func onSubtitleChanged(event: MKPlayer.MKPSubtitleChangedEvent)
  func onAudioChanged(event: MKPlayer.MKPAudioChangedEvent)
  func onVideoDownloadQualityChanged(event: MKPlayer.MKPVideoDownloadQualityChangedEvent)
  func onScalingModeChanged(event: MKPlayer.MKPScalingModeChangedEvent)
  func onThumbnailAvailable(resolutions: [MKPlayer.MKPImageMediaPlaylist])
  func onAdMarkerData(event: [MKPlayer.MKPAdBreak])
  func onAdBreakStarted(event: MKPlayer.MKPAdBreakStartedEvent)
  func onAdBreakEnd(event: MKPlayer.MKPAdBreakEndEvent)
  func onProgramRestrictions(event: MKPlayer.MKPProgramRestrictionsEvent)
  func onProgramTimeChanged(event: MKPlayer.MKPProgramTimeChangedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  func onSharePlayStarted(_ event: MKPlayer.MKPSharePlayStartedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  func onSharePlayEnded(_ event: MKPlayer.MKPSharePlayEndedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  func onSharePlaySuspensionStarted(_ event: MKPlayer.MKPSharePlaySuspensionStartedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  func onSharePlaySuspensionEnded(_ event: MKPlayer.MKPSharePlaySuspensionEndedEvent)
}
extension MKPlayer.MKPPlayerEventListener {
  public func onError(event: MKPlayer.MKPErrorEvent)
  public func onMuted(event: MKPlayer.MKPMutedEvent)
  public func onPaused(event: MKPlayer.MKPPausedEvent)
  public func onPlay(event: MKPlayer.MKPPlayEvent)
  public func onPlaybackFinished(event: MKPlayer.MKPPlaybackFinishedEvent)
  public func onPlaying(event: MKPlayer.MKPPlayingEvent)
  public func onReady(event: MKPlayer.MKPReadyEvent)
  public func onSeek(event: MKPlayer.MKPSeekEvent)
  public func onSeeked(event: MKPlayer.MKPSeekedEvent)
  public func onSourceLoaded(event: MKPlayer.MKPSourceLoadedEvent)
  public func onSourceUnloaded(event: MKPlayer.MKPSourceUnloadedEvent)
  public func onUnmuted(event: MKPlayer.MKPUnmutedEvent)
  public func onTimeChanged(event: MKPlayer.MKPTimeChangedEvent)
  public func onDurationChanged(event: MKPlayer.MKPDurationChangedEvent)
  public func onMetadata(event: MKPlayer.MKPMetadataEvent)
  public func onMetadataParsed(event: MKPlayer.MKPMetadataParsedEvent)
  public func onAdStarted(event: MKPlayer.MKPAdStartedEvent)
  public func onAdFinished(event: MKPlayer.MKPAdFinishedEvent)
  public func onAdQuartile(event: MKPlayer.MKPAdQuartileEvent)
  public func onTimeShift(event: MKPlayer.MKPTimeShiftEvent)
  public func onTimeShifted(event: MKPlayer.MKPTimeShiftedEvent)
  public func onDvrWindowExceeded(event: MKPlayer.MKPDvrWindowExceededEvent)
  public func onStallStarted(event: MKPlayer.MKPStallStartedEvent)
  public func onStallEnded(event: MKPlayer.MKPStallEndedEvent)
  public func onVideoSizeChanged(event: MKPlayer.MKPVideoSizeChangedEvent)
  public func onSourceWillUnload(event: MKPlayer.MKPSourceWillUnloadEvent)
  public func onSubtitleChanged(event: MKPlayer.MKPSubtitleChangedEvent)
  public func onAudioChanged(event: MKPlayer.MKPAudioChangedEvent)
  public func onVideoDownloadQualityChanged(event: MKPlayer.MKPVideoDownloadQualityChangedEvent)
  public func onScalingModeChanged(event: MKPlayer.MKPScalingModeChangedEvent)
  public func onProgramRestrictions(event: MKPlayer.MKPProgramRestrictionsEvent)
  public func onProgramTimeChanged(event: MKPlayer.MKPProgramTimeChangedEvent)
  public func onAdMarkerData(event: [MKPlayer.MKPAdBreak])
  public func onAdBreakStarted(event: MKPlayer.MKPAdBreakStartedEvent)
  public func onAdBreakEnd(event: MKPlayer.MKPAdBreakEndEvent)
  public func onThumbnailAvailable(resolutions: [MKPlayer.MKPImageMediaPlaylist])
  @available(iOS 15.0, tvOS 15.0, *)
  public func onSharePlayStarted(_ event: MKPlayer.MKPSharePlayStartedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  public func onSharePlayEnded(_ event: MKPlayer.MKPSharePlayEndedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  public func onSharePlaySuspensionStarted(_ event: MKPlayer.MKPSharePlaySuspensionStartedEvent)
  @available(iOS 15.0, tvOS 15.0, *)
  public func onSharePlaySuspensionEnded(_ event: MKPlayer.MKPSharePlaySuspensionEndedEvent)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPPlayEvent : MKPlayer.MKPEvent {
  final public let time: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(time: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPPlayingEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum MKPProgramRestriction : Swift.Int {
  case wifi
  case cellular
  case phone
  case tablet
  case stb
  case jailbroken
  case outOfHome
  case iOS
  case rewind
  case fastForward
  case pause
  case resume
  case seekForward
  case seekBackward
  case restart
  case timeshift
  case extendedDisplay
  case airplay
  public var code: Swift.String {
    get
  }
  public var message: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPProgramRestrictionsEvent : MKPlayer.MKPEvent {
  final public let restrictions: [MKPlayer.MKPProgramRestriction]
  override public var eventType: Swift.String {
    get
  }
  public init(_ restrictions: [MKPlayer.MKPProgramRestriction])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPProgramTimeChangedEvent : MKPlayer.MKPEvent {
  final public let timeRange: MKPlayer.MKPTimeRange
  override public var eventType: Swift.String {
    get
  }
  public init(startTime: Foundation.Date, endTime: Foundation.Date)
  @objc deinit
}
public class MKPQuality {
  final public let identifier: Swift.String
  final public let label: Swift.String
  final public let bitrate: Swift.UInt
  final public let codec: Swift.String?
  public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPReadyEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum MKPScalingMode : Swift.Int {
  case fit
  case zoom
  case stretch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MKPScalingModeChangedEvent : MKPlayer.MKPEvent {
  final public let scalingModeOld: MKPlayer.MKPScalingMode?
  final public let scalingModeNew: MKPlayer.MKPScalingMode?
  override public var eventType: Swift.String {
    get
  }
  public init(scalingModeOld: MKPlayer.MKPScalingMode?, scalingModeNew: MKPlayer.MKPScalingMode?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MKPScteMetadata : MKPlayer.MKPMetadata {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPScteMetadataEntry : ObjectiveC.NSObject, MKPlayer.MKPMetadaEntry {
  public var metadataType: MKPlayer.MKPMetadataType {
    get
  }
  final public let key: Swift.String
  final public let value: Swift.String?
  public init(key: Swift.String, value: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPSeekedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPSeekEvent : MKPlayer.MKPEvent {
  final public let position: Foundation.TimeInterval
  final public let seekTarget: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(position: Foundation.TimeInterval, seekTarget: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
public class MKPSharePlayEndedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
public class MKPSharePlayStartedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
public class MKPSharePlaySuspension : BitmovinPlayer.SharePlaySuspension {
  @objc final public let reason: MKPlayer.MKPSharePlaySuspension.Reason
  @objc final public let beginDate: Foundation.Date
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
public class MKPSharePlaySuspensionEndedEvent : MKPlayer.MKPEvent {
  final public let suspension: MKPlayer.MKPSharePlaySuspension
  override public var eventType: Swift.String {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
public class MKPSharePlaySuspensionStartedEvent : MKPlayer.MKPEvent {
  final public let suspension: MKPlayer.MKPSharePlaySuspension
  override public var eventType: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MKPSignatureGenerator {
  public static let shared: MKPlayer.MKPSignatureGenerator
  public func generateKeys(gkServerUrl: Swift.String)
  public func generateSignature(method: Swift.String, queryParams: [Swift.String : Any]) -> Swift.String?
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let MKPSignatureGeneratorDidFinishGeneratingKeys: Foundation.Notification.Name
}
final public class MKPSourceConfiguration : Swift.Codable, Swift.Equatable {
  final public let isLive: Swift.Bool?
  final public let sourceUrl: Swift.String?
  final public let mediaId: Swift.String?
  final public let applicationToken: Swift.String?
  final public var title: Swift.String?
  final public var posterSource: Foundation.URL?
  final public var metadata: Foundation.NSMutableDictionary?
  final public var sourceOptions: MKPlayer.MKPSourceOptions?
  final public var cdnOptions: MKPlayer.MKPCdnOptions?
  final public var analyticsConfiguration: MKPlayer.MKPAnalyticsConfiguration?
  public init(sourceUrl: Swift.String, isLive: Swift.Bool, title: Swift.String? = nil, posterSource: Foundation.URL? = nil, metadata: Foundation.NSMutableDictionary? = nil, sourceOptions: MKPlayer.MKPSourceOptions? = nil, isOffline: Swift.Bool = false, analyticsConfiguration: MKPlayer.MKPAnalyticsConfiguration? = nil)
  public init(mediaId: Swift.String, isLive: Swift.Bool, applicationToken: Swift.String? = nil, title: Swift.String? = nil, posterSource: Foundation.URL? = nil, metadata: Foundation.NSMutableDictionary? = nil, sourceOptions: MKPlayer.MKPSourceOptions? = nil, cdnOptions: MKPlayer.MKPCdnOptions? = nil, isOffline: Swift.Bool = false, analyticsConfiguration: MKPlayer.MKPAnalyticsConfiguration? = nil)
  public static func == (lhs: MKPlayer.MKPSourceConfiguration, rhs: MKPlayer.MKPSourceConfiguration) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MKPSourceLoadedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct MKPSourceOptions : Swift.Codable {
  public let startOffset: Foundation.TimeInterval
  public let startOffsetTimelineReference: MKPlayer.MKPTimelineReferencePoint
  public init(startOffset: Foundation.TimeInterval?, startOffsetTimelineReference: MKPlayer.MKPTimelineReferencePoint = .start)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MKPSourceUnloadedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPSourceWillUnloadEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPStallEndedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPStallStartedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MKPSubtitleChangedEvent : MKPlayer.MKPEvent {
  final public let subtitleTrackOld: MKPlayer.MKPSubtitleTrack?
  final public let subtitleTrackNew: MKPlayer.MKPSubtitleTrack?
  override public var eventType: Swift.String {
    get
  }
  public init(subtitleTrackOld: MKPlayer.MKPSubtitleTrack?, subtitleTrackNew: MKPlayer.MKPSubtitleTrack?)
  @objc deinit
}
@objc public class MKPSubtitleTrack : MKPlayer.MKPTrack {
  public var language: Swift.String? {
    get
  }
  public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool = false, language: Swift.String?)
  @objc deinit
}
public class MKPThumbnail {
  public init(start: Swift.Double = 0.0, end: Swift.Double = 0.0, url: Foundation.URL? = nil, x: Swift.Int = 0, y: Swift.Int = 0, width: Swift.Int = 0, height: Swift.Int = 0, text: Swift.String = String(), tile: Swift.Bool = false)
  final public let start: Swift.Double
  final public let end: Swift.Double
  final public let url: Foundation.URL?
  final public let x: Swift.Int
  final public let y: Swift.Int
  final public let width: Swift.Int
  final public let height: Swift.Int
  final public let text: Swift.String
  final public let tile: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPTimeChangedEvent : MKPlayer.MKPEvent {
  final public let currentTime: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(currentTime: Foundation.TimeInterval)
  @objc deinit
}
public enum MKPTimelineReferencePoint : Swift.Int, Swift.Codable {
  case start
  case end
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MKPTimeMode : Swift.UInt {
  case relativeTime
  case absoluteTime
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public struct MKPTimeRange {
  public let start: Foundation.TimeInterval
  public let end: Foundation.TimeInterval
  public let duration: Foundation.TimeInterval
  public init(currentTime: Foundation.TimeInterval, currentTimeShift: Foundation.TimeInterval, maxTimeShift: Foundation.TimeInterval, currentProgramStartTime: Foundation.TimeInterval?, isPreRollPresent: Swift.Bool = false)
  public init(duration: Foundation.TimeInterval)
  public init(currentProgramStartTime: Foundation.Date, currentProgramEndTime: Foundation.Date)
}
@objc @_inheritsConvenienceInitializers public class MKPTimeShiftedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPTimeShiftEvent : MKPlayer.MKPEvent {
  final public let position: Foundation.TimeInterval
  final public let target: Foundation.TimeInterval
  final public let timeShift: Foundation.TimeInterval
  override public var eventType: Swift.String {
    get
  }
  public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MKPTrack : ObjectiveC.NSObject {
  public var url: Foundation.URL? {
    get
  }
  public var label: Swift.String {
    get
  }
  public var identifier: Swift.String {
    get
  }
  public var defaultTrack: Swift.Bool {
    get
  }
  public var type: MKPlayer.MKPTrackType {
    get
  }
  public init(url: Foundation.URL?, trackType: MKPlayer.MKPTrackType, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool = false)
  @objc deinit
}
public enum MKPTrackType : Swift.Int {
  case none
  case text
  case thumbnail
  case audio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MKPUnmutedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MKPVideoDownloadQualityChangedEvent : MKPlayer.MKPEvent {
  final public let videoQualityOld: MKPlayer.MKPVideoQuality?
  final public let videoQualityNew: MKPlayer.MKPVideoQuality?
  override public var eventType: Swift.String {
    get
  }
  public init(videoQualityOld: MKPlayer.MKPVideoQuality?, videoQualityNew: MKPlayer.MKPVideoQuality?)
  @objc deinit
}
public class MKPVideoQuality : MKPlayer.MKPQuality {
  final public let width: Swift.UInt
  final public let height: Swift.UInt
  public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?, width: Swift.UInt, height: Swift.UInt)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MKPVideoSizeChangedEvent : MKPlayer.MKPEvent {
  override public var eventType: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension MKPlayer.MKPAdQuartile : Swift.Equatable {}
extension MKPlayer.MKPAdQuartile : Swift.Hashable {}
extension MKPlayer.MKPAdQuartile : Swift.RawRepresentable {}
extension MKPlayer.MKPMediaSourceType : Swift.Equatable {}
extension MKPlayer.MKPMediaSourceType : Swift.Hashable {}
extension MKPlayer.MKPMediaSourceType : Swift.RawRepresentable {}
extension MKPlayer.MKPMetadataType : Swift.Equatable {}
extension MKPlayer.MKPMetadataType : Swift.Hashable {}
extension MKPlayer.MKPMetadataType : Swift.RawRepresentable {}
extension MKPlayer.MKPOfflineState : Swift.Equatable {}
extension MKPlayer.MKPOfflineState : Swift.Hashable {}
extension MKPlayer.MKPOfflineState : Swift.RawRepresentable {}
extension MKPlayer.MKPProgramRestriction : Swift.Equatable {}
extension MKPlayer.MKPProgramRestriction : Swift.Hashable {}
extension MKPlayer.MKPProgramRestriction : Swift.RawRepresentable {}
extension MKPlayer.MKPScalingMode : Swift.Equatable {}
extension MKPlayer.MKPScalingMode : Swift.Hashable {}
extension MKPlayer.MKPScalingMode : Swift.RawRepresentable {}
extension MKPlayer.MKPTimelineReferencePoint : Swift.Equatable {}
extension MKPlayer.MKPTimelineReferencePoint : Swift.Hashable {}
extension MKPlayer.MKPTimelineReferencePoint : Swift.RawRepresentable {}
extension MKPlayer.MKPTimeMode : Swift.Equatable {}
extension MKPlayer.MKPTimeMode : Swift.Hashable {}
extension MKPlayer.MKPTimeMode : Swift.RawRepresentable {}
extension MKPlayer.MKPTrackType : Swift.Equatable {}
extension MKPlayer.MKPTrackType : Swift.Hashable {}
extension MKPlayer.MKPTrackType : Swift.RawRepresentable {}
